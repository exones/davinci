// Grid DCTL - Draws vertical and horizontal lines at specified positions
// Includes utility functions for line drawing

// Function to check if the current pixel is on a vertical line
__DEVICE__ bool isOnVerticalLine(int p_X, int lineX, int lineWidth)
{
    // Check if the current X coordinate is within the line width centered at lineX
    int halfWidth = lineWidth / 2;

return (p_X >= lineX - halfWidth && p_X <= lineX + halfWidth);
}

// Function to check if the current pixel is on a horizontal line
__DEVICE__ bool isOnHorizontalLine(int p_Y, int lineY, int lineWidth)
{
    // Check if the current Y coordinate is within the line width centered at lineY
    int halfWidth = lineWidth / 2;
return (p_Y >= lineY - halfWidth && p_Y <= lineY + halfWidth);
}

// Function to draw a vertical line
__DEVICE__ float3 drawVerticalLine(float3 originalColor, int p_X, int lineX, int lineWidth, float3 lineColor)
{
    if (isOnVerticalLine(p_X, lineX, lineWidth))
    {
        return lineColor;
    }
    return originalColor;
}

// Function to draw a horizontal line
__DEVICE__ float3 drawHorizontalLine(float3 originalColor, int p_Y, int lineY, int lineWidth, float3 lineColor)
{
    if (isOnHorizontalLine(p_Y, lineY, lineWidth))
    {
        return lineColor;
    }
    return originalColor;
}

// Main transform function
__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, __TEXTURE__ p_TexR, __TEXTURE__ p_TexG, __TEXTURE__ p_TexB)
{
    // Get the original pixel color
    float r = _tex2D(p_TexR, p_X, p_Y);
float g = _tex2D(p_TexG, p_X, p_Y);
float b = _tex2D(p_TexB, p_X, p_Y);
float3 originalColor = make_float3(r, g, b);

// Define line properties
int verticalLineX = p_Width / 2;                  // Center vertical line
int horizontalLineY = p_Height / 2;               // Center horizontal line
int lineWidth = 1;                                // Line thickness
float3 lineColor = make_float3(1.0f, 1.0f, 1.0f); // White line color

// Apply vertical line
float3 result = drawVerticalLine(originalColor, p_X, verticalLineX, lineWidth, lineColor);

// Apply horizontal line (will override vertical line at intersection)
result = drawHorizontalLine(result, p_Y, horizontalLineY, lineWidth, lineColor);

return result;
}
